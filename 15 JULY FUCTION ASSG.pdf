Q1. Which keyword is used to create a function? Create a function to return a list of odd numbers in the range of 1 to 25.

def get_odd_numbers():
    odd_numbers = []
    for num in range(1, 26):
        if num % 2 != 0:
            odd_numbers.append(num)
    return odd_numbers
​
odd_numbers_list = get_odd_numbers()
print(odd_numbers_list)
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
Q2. Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs to demonstrate their use.

def function_with_args(*args):
    for arg in args:
        print(arg)
​
function_with_args(1, 2, 3, 4, 5)
1
2
3
4
5
Q3. What is an iterator in python? Name the method used to initialise the iterator object and the method used for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20].

def function_with_kwargs(**kwargs):
    for key, value in kwargs.items():
        print(key, value)
​
function_with_kwargs(name="John", age=25, city="New York")
name John
age 25
city New York
Q4. What is a generator function in python? Why yield keyword is used? Give an example of a generator function.

def even_numbers_generator():
    num = 0
    while True:
        yield num
        num += 2
​
# Create a generator object
even_generator = even_numbers_generator()
​
# Generate and print the first five even numbers
for _ in range(5):
    print(next(even_generator))
0
2
4
6
8
Q5. Create a generator function for prime numbers less than 1000. Use the next() method to print the first 20 prime numbers.

def prime_generator():
    primes = []
    num = 2
    while True:
        if all(num % prime != 0 for prime in primes):
            primes.append(num)
            yield num
        num += 1
​
# Create a generator object
prime_gen = prime_generator()
​
# Print the first 20 prime numbers
for _ in range(20):
    print(next(prime_gen))
2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71
​